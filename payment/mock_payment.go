// Code generated by MockGen. DO NOT EDIT.
// Source: payment.go

// Package payment is a generated GoMock package.
package payment

import (
	http "net/http"
	reflect "reflect"

	data "github.com/companieshouse/refund-request-consumer/data"
	gomock "github.com/golang/mock/gomock"
)

// MockPayments is a mock of Payments interface.
type MockPayments struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentsMockRecorder
}

// MockPaymentsMockRecorder is the mock recorder for MockPayments.
type MockPaymentsMockRecorder struct {
	mock *MockPayments
}

// NewMockPayments creates a new mock instance.
func NewMockPayments(ctrl *gomock.Controller) *MockPayments {
	mock := &MockPayments{ctrl: ctrl}
	mock.recorder = &MockPaymentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayments) EXPECT() *MockPaymentsMockRecorder {
	return m.recorder
}

// RefundRequestPost mocks base method.
func (m *MockPayments) RefundRequestPost(refundRequestURL string, patchBody data.RefundPostRequest, HTTPClient *http.Client, apiKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundRequestPost", refundRequestURL, patchBody, HTTPClient, apiKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefundRequestPost indicates an expected call of RefundRequestPost.
func (mr *MockPaymentsMockRecorder) RefundRequestPost(refundRequestURL, patchBody, HTTPClient, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundRequestPost", reflect.TypeOf((*MockPayments)(nil).RefundRequestPost), refundRequestURL, patchBody, HTTPClient, apiKey)
}
